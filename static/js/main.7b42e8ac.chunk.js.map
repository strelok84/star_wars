{"version":3,"sources":["common/Loader/Loader.js","pages/MainPage/MainPage.js","pages/Films/Films.js","assets/img/male.svg","assets/img/female.svg","pages/People/People.js","pages/Planets/Planets.js","pages/Species/Species.js","pages/Starships/Starships.js","pages/Vehicles/Vehicles.js","App.js","index.js"],"names":["className","Content","Layout","MainPage","useState","data","setData","isLoading","setLoading","useEffect","url","a","fetch","response","json","console","log","request","currentIsLoaded","count","Object","keys","map","item","index","href","Header","Films","films","setFilms","pages","oldArray","results","title","director","producer","release_date","People","people","setPeople","name","skin_color","gender","src","male","alt","female","mass","eye_color","format","created","edited","Planets","planets","setPlanets","useReducer","x","forceUpdate","byNumberField","field","sort","b","byAlphField","onClick","CaretDownOutlined","climate","gravity","rotation_period","orbital_period","population","terrain","Species","species","setSpecies","average_height","average_lifespan","language","hair_colors","eye_colors","skin_colors","Starships","starships","setStarships","model","starship_class","cargo_capacity","manufacturer","crew","passengers","Vehicles","vehicles","setVehicles","vehicle_class","App","path","component","exact","to","ReactDOM","render","basename","document","getElementById"],"mappings":"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","file":"static/js/main.7b42e8ac.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Loader.scss\";\n\nexport default () => <div className=\"lds-hourglass\" />;\n","import React, { useState, useEffect } from \"react\";\nimport Loader from \"../../common/Loader/Loader\";\n\nimport \"antd/dist/antd.css\";\n\nimport { Layout, Button } from \"antd\";\nconst { Content } = Layout;\n\n\nfunction MainPage() {\n  const [data, setData] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n\n  useEffect((data) => {\n    async function request(url) {\n      const response = await fetch(url);\n      const data = await response.json();      \n      setData(data);\n      console.log(data);\n    }\n    const url = \"https://swapi.dev/api/\";\n    request(url);\n    setLoading((currentIsLoaded) => !currentIsLoaded)\n  }, []);\n\n  let count = 1;\n  return (\n    <>\n    <Layout>\n      <Content>\n      {isLoading?<Loader />: \n      (<table>\n          <thead>\n            <tr>\n              <th>Номер</th>\n              <th>Название</th>\n              <th>API</th>\n              <th></th>              \n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(data).map((item, index) => (\n              <tr key={index}>\n                <td>{count++}</td>\n                <td>{item}</td>\n                <td>{data[item]}</td>\n                <td>\n                  <Button href={`./${item}`}>Открыть страницу</Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n      </Content>\n      </Layout>\n    </>\n  );\n}\n\nexport default MainPage;\n","import React, { useState, useEffect } from \"react\";\nimport Loader from \"../../common/Loader/Loader\";\n\nimport \"antd/dist/antd.css\";\n\nimport { Button, Layout } from \"antd\";\nconst { Header, Content } = Layout;\n\nfunction Films() {\n  const [films, setFilms] = useState([]);\n  let [isLoading, setLoading] = useState(true);\n  useEffect(() => {\n    let pages = 1;\n    async function request() {\n      const url = `https://swapi.dev/api/films/?page=${pages}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      setFilms((oldArray) => [...oldArray, ...data.results]);\n      if (data[\"next\"]) {\n        pages++;\n        request();\n      }\n    }\n    request();\n    setLoading((currentIsLoaded) => (currentIsLoaded = false));\n  }, []);\n\n  return (\n    <>\n      <Layout>\n        <Header>\n          <Button href=\"./\">Назад</Button>\n        </Header>\n        <Content>\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <table>\n              <thead className=\"table_head\">\n                <tr>\n                  <th>Название</th>\n                  <th>Режиссер</th>\n                  <th>Продюсер</th>\n                  <th>Дата выхода</th>\n                </tr>\n              </thead>\n              <tbody>\n                {films.map((item, index) => (\n                  <tr key={index}>\n                    <td>{item.title}</td>\n                    <td>{item.director}</td>\n                    <td>{item.producer}</td>\n                    <td>{item.release_date}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </Content>\n      </Layout>\n    </>\n  );\n}\n\nexport default Films;\n","export default __webpack_public_path__ + \"static/media/male.751b7f8a.svg\";","export default __webpack_public_path__ + \"static/media/female.af586cbc.svg\";","import React, { useState, useEffect } from \"react\";\nimport Moment from \"react-moment\";\nimport Loader from \"../../common/Loader/Loader\";\nimport male from \"../../assets/img/male.svg\";\nimport female from \"../../assets/img/female.svg\";\nimport \"antd/dist/antd.css\";\nimport \"./people.scss\";\n\nimport { Button, Layout } from \"antd\";\n\nconst { Header, Content } = Layout;\n\nfunction People() {\n  const [people, setPeople] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n  useEffect(() => {\n    let pages = 1;\n    async function request() {\n      const url = `https://swapi.dev/api/people/?page=${pages}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      setPeople((oldArray) => [...oldArray, ...data.results]);\n      if (data[\"next\"]) {\n        pages++;\n        request();\n      }\n      console.log(people);\n    }\n\n    request();\n    setLoading((currentIsLoaded) => !currentIsLoaded);\n  }, []);\n\n  return (\n    <>\n      <Layout>\n        <Header>\n          <Button href=\"./\">Назад</Button>\n        </Header>\n        <Content>\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <table>\n              <thead className=\"table_head\">\n                <tr>\n                  <th>Имя</th>\n                  <th>Цвет кожи</th>\n                  <th>Пол</th>\n                  <th>Вес</th>\n                  <th>Цвет глаз</th>\n                  <th>Создано</th>\n                  <th>Отредактировано</th>\n                </tr>\n              </thead>\n              <tbody>\n                {people.map((item, index) => (\n                  <tr key={index}>\n                    <td>{item.name}</td>\n                    <td>{item.skin_color}</td>\n                    <td>\n                      {(() => {\n                        switch (item.gender) {\n                          case \"male\":\n                            return (\n                              <img\n                                src={male}\n                                className=\"gender\"\n                                alt=\"male\"\n                              ></img>\n                            );\n                          case \"female\":\n                            return (\n                              <img\n                                src={female}\n                                className=\"gender\"\n                                alt=\"female\"\n                              ></img>\n                            );\n                          default:\n                            return \"n/a\";\n                        }\n                      })()}\n                    </td>\n                    <td>{item.mass}</td>\n                    <td>{item.eye_color}</td>\n                    <td>\n                      <Moment format=\"YYYY/MM/DD\">{item.created}</Moment>\n                    </td>\n                    <td>\n                      <Moment format=\"YYYY/MM/DD\">{item.edited}</Moment>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </Content>\n      </Layout>\n    </>\n  );\n}\n\nexport default People;\n","import React, { useState, useEffect, useReducer } from \"react\";\nimport Loader from \"../../common/Loader/Loader\";\nimport \"antd/dist/antd.css\";\nimport { Button, Layout } from \"antd\";\nimport {CaretDownOutlined} from '@ant-design/icons';\nconst { Header, Content } = Layout;\n\n\nfunction Planets() {\n  const [planets, setPlanets] = useState([]);\n  const [ignored, forceUpdate] = useReducer((x) => x + 1, 0);\n  const [isLoading, setLoading] = useState(true);\n  useEffect(() => {\n    let pages = 1;\n    async function request() {\n      const url = `https://swapi.dev/api/planets/?page=${pages}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      setPlanets((oldArray) => [...oldArray, ...data.results]);\n      if (data[\"next\"]) {\n        pages++;\n        request();\n      }\n      console.log(planets);\n    }\n    \n    request();\n    setLoading(currentIsLoaded=>!currentIsLoaded)\n  }, []);\n\n  function byNumberField(field) {\n    setPlanets(\n      planets.sort((a, b) => {\n        return +a[field] > +b[field] ? 1 : -1;\n      })\n    );\n    forceUpdate();\n  }\n\n  function byAlphField(field) {\n    setPlanets(\n      planets.sort((a, b) => {\n        return a[field] > b[field] ? 1 : -1;\n      })\n    );\n    forceUpdate();\n  }\n\n  return (\n    <>\n    <Layout>\n      <Header>\n      <Button href=\"./\">Назад</Button>\n      \n      </Header>\n      {isLoading?<Loader />:\n      (<table>\n        <thead>\n          <tr>\n            <th\n              onClick={() => {\n                byAlphField(\"name\");\n              }}\n            >\n              Имя\n              <CaretDownOutlined />\n            </th>\n            <th\n              onClick={() => {\n                byAlphField(\"climate\");\n              }}\n            >\n              Климат\n              <CaretDownOutlined />\n            </th>\n            <th\n              onClick={() => {\n                byNumberField(\"gravity\");\n              }}\n            >\n              Гравитация\n              <CaretDownOutlined />\n            </th>\n            <th\n              onClick={() => {\n                byNumberField(\"rotation_period\");\n              }}\n            >\n              Продолжительность дня\n              <CaretDownOutlined />\n            </th>\n            <th\n              onClick={() => {\n                byNumberField(\"orbital_period\");\n              }}\n            >\n              Продолжительность года\n              <CaretDownOutlined />\n            </th>\n            <th\n              onClick={() => {\n                byNumberField(\"population\");\n              }}\n            >\n              Население\n              <CaretDownOutlined />\n            </th>\n            <th\n              onClick={() => {\n                byAlphField(\"terrain\");\n              }}\n            >\n              Поверхность\n              <CaretDownOutlined />\n            </th>\n          </tr>\n        </thead>\n        <tbody>\n          {planets.map((item, index) => (\n            <tr key={index}>\n              <td>{item.name}</td>\n              <td>{item.climate}</td>\n              <td>{item.gravity}</td>\n              <td>{item.rotation_period}</td>\n              <td>{item.orbital_period}</td>\n              <td>{item.population}</td>\n              <td>{item.terrain}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>)}\n      </Layout>\n    </>\n  );\n}\n\nexport default Planets;\n","import React, { useState, useEffect } from \"react\";\nimport Loader from \"../../common/Loader/Loader\";\nimport \"antd/dist/antd.css\";\nimport { Button, Layout } from \"antd\";\nconst { Header, Content } = Layout;\n\nfunction Species() {\n  const [species, setSpecies] = useState([]);\n  let [isLoading, setLoading] = useState(true);\n  useEffect( () => {\n    let pages = 1;\n    async function request() {      \n      const url = `https://swapi.dev/api/species/?page=${pages}`;\n      const response = await fetch(url)\n      const data = await response.json()\n      setSpecies((oldArray) => [...oldArray, ...data.results]);\n      if (data[\"next\"]) {\n        pages++;\n        request();\n      }\n      console.log(species);\n    }    \n    request()\n    setLoading(currentIsLoaded=>!currentIsLoaded)\n  }, []);\n\n  return (\n    <>\n      <Layout>\n      <Header>\n      <Button href=\"./\">Назад</Button>\n      </Header>\n      {isLoading?<Loader/>:  \n      (<table>\n        <thead>\n          <tr>\n            <th>Наименование</th>\n            <th>Средний рост</th>\n            <th>Средняя продолжительность жизни</th>\n            <th>Язык</th>\n            <th>Цвет волос</th>\n            <th>Цвет глаз</th>\n            <th>Цвет кожи</th>\n          </tr>\n        </thead>\n        <tbody>\n          {species.map((item, index) => (\n            <tr key={index}>\n              <td>{item.name}</td>\n              <td>{item.average_height}</td>\n              <td>{item.average_lifespan}</td>\n              <td>{item.language}</td>\n              <td>{item.hair_colors}</td>\n              <td>{item.eye_colors}</td>\n              <td>{item.skin_colors}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>)}\n      </Layout>\n    </>\n  );\n}\n\nexport default Species;\n","import React, { useState, useEffect } from \"react\";\nimport Loader from \"../../common/Loader/Loader\";\nimport \"antd/dist/antd.css\";\nimport { Button, Layout } from \"antd\";\nconst { Header, Content } = Layout;\n\nfunction Starships() {\n  const [starships, setStarships] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n  useEffect(() => {\n    let pages = 1;\n    async function request() {\n      const url = `https://swapi.dev/api/starships/?page=${pages}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      setStarships((oldArray) => [...oldArray, ...data.results]);\n      if (data[\"next\"]) {\n        pages++;\n        request();\n      }\n      console.log(starships);\n    }\n    \n    request();\n    setLoading(currentIsLoaded=>!currentIsLoaded)\n  }, []);\n\n  return (\n    <div>\n     <Button href=\"./\">Назад</Button>\n      {isLoading?<Loader />:\n      (<table>\n        <thead>\n          <tr>\n            <th>Наименование</th>\n            <th>Модель</th>\n            <th>Класс</th>\n            <th>Грузоподьемность</th>\n            <th>Производитель</th>\n            <th>Экипаж</th>\n            <th>Пассажиров</th>\n          </tr>\n        </thead>\n        <tbody>\n          {starships.map((item, index) => (\n            <tr key={index}>\n              <td>{item.name}</td>\n              <td>{item.model}</td>\n              <td>{item.starship_class}</td>\n              <td>{item.cargo_capacity}</td>\n              <td>{item.manufacturer}</td>\n              <td>{item.crew}</td>\n              <td>{item.passengers}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>)}\n    </div>\n  );\n}\n\nexport default Starships;\n","import React, { useState, useEffect } from \"react\";\nimport Loader from \"../../common/Loader/Loader\";\nimport \"antd/dist/antd.css\";\nimport { Button, Layout } from \"antd\";\nconst { Header, Content } = Layout;\n\nfunction Vehicles() {\n  const [vehicles, setVehicles] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n  useEffect(() => {\n    let pages = 1;\n    async function request() {\n      const url = `https://swapi.dev/api/vehicles/?page=${pages}`; \n      const response = await fetch(url);\n      const data = await response.json();\n      setVehicles((oldArray) => [...oldArray, ...data.results]);\n      if (data[\"next\"]) {\n        pages++;\n        request();\n      }\n      console.log(vehicles);\n    }\n     \n    request();\n    setLoading(currentIsLoaded=>!currentIsLoaded)\n  }, []);\n\n  return (\n    <div>\n       <Button href=\"./\">Назад</Button>\n      {isLoading?<Loader/>:  \n      (<table>\n        <thead>\n          <tr>\n            <th>Наименование</th>\n            <th>Модель</th>\n            <th>Класс</th>\n            <th>Грузоподьемность</th>\n            <th>Производитель</th>\n            <th>Экипаж</th>\n            <th>Пассажиров</th>\n          </tr>\n        </thead>\n        <tbody>\n          {vehicles.map((item, index) => (\n            <tr key={index}>\n              <td>{item.name}</td>\n              <td>{item.model}</td>\n              <td>{item.vehicle_class}</td>\n              <td>{item.cargo_capacity}</td>\n              <td>{item.manufacturer}</td>\n              <td>{item.crew}</td>\n              <td>{item.passengers}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>)}\n    </div>\n  );\n}\n\nexport default Vehicles;\n","import { Route, Switch, Redirect } from \"react-router-dom\";\nimport MainPage from \"./pages/MainPage/MainPage\";\nimport \"./App.scss\";\nimport Films from \"./pages/Films/Films\";\nimport People from \"./pages/People/People\";\nimport Planets from \"./pages/Planets/Planets\";\nimport Species from \"./pages/Species/Species\";\nimport Starships from \"./pages/Starships/Starships\";\nimport Vehicles from \"./pages/Vehicles/Vehicles\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/films\" component={Films} />\n        <Route path=\"/people\" component={People} />\n        <Route path=\"/planets\" component={Planets} />\n        <Route path=\"/species\" component={Species} />\n        <Route path=\"/starships\" component={Starships} />\n        <Route path=\"/vehicles\" component={Vehicles} />\n        <Route exact path=\"/\" component={MainPage} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter basename=\"/star_wars\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}