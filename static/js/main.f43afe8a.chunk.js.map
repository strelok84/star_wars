{"version":3,"sources":["common/Loader/Loader.js","pages/MainPage/MainPage.js","pages/Films/Films.js","assets/img/male.svg","assets/img/female.svg","pages/People/People.js","pages/Planets/Planets.js","pages/Species/Species.js","pages/Starships/Starships.js","pages/Vehicles/Vehicles.js","App.js","index.js"],"names":["className","Content","Layout","MainPage","useState","data","setData","isLoading","setLoading","useEffect","url","a","fetch","response","json","console","log","request","currentIsLoaded","count","Object","keys","map","item","index","href","Header","Footer","Films","films","setFilms","page","setPage","maxpage","setMaxpage","prevBtn","document","getElementById","disabled","nextBtn","ok","results","Math","ceil","title","director","producer","release_date","onClick","id","ArrowLeftOutlined","ArrowRightOutlined","People","people","setPeople","name","skin_color","gender","src","male","alt","female","mass","eye_color","format","created","edited","Planets","planets","setPlanets","useReducer","x","forceUpdate","byNumberField","field","sort","b","byAlphField","CaretDownOutlined","climate","gravity","rotation_period","orbital_period","population","terrain","Species","species","setSpecies","average_height","average_lifespan","language","hair_colors","eye_colors","skin_colors","Starships","starships","setStarships","model","starship_class","cargo_capacity","manufacturer","crew","passengers","Vehicles","vehicles","setVehicles","oldArray","vehicle_class","App","path","component","exact","to","ReactDOM","render","basename"],"mappings":"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","file":"static/js/main.f43afe8a.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./Loader.scss\";\n\nexport default () => <div className=\"lds-hourglass\" />;\n","import React, { useState, useEffect } from \"react\";\nimport Loader from \"../../common/Loader/Loader\";\n\nimport \"antd/dist/antd.css\";\n\nimport { Layout, Button } from \"antd\";\nconst { Content } = Layout;\n\n\nfunction MainPage() {\n  const [data, setData] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n\n  useEffect((data) => {\n    async function request(url) {\n      const response = await fetch(url);\n      const data = await response.json();      \n      setData(data);\n      console.log(data);\n    }\n    const url = \"https://swapi.dev/api/\";\n    request(url);\n    setLoading((currentIsLoaded) => !currentIsLoaded)\n  }, []);\n\n  let count = 1;\n  return (\n    <>\n    <Layout>\n      <Content>\n      {isLoading?<Loader />: \n      (<table>\n          <thead>\n            <tr>\n              <th>Номер</th>\n              <th>Название</th>\n              <th>API</th>\n              <th></th>              \n            </tr>\n          </thead>\n          <tbody>\n            {Object.keys(data).map((item, index) => (\n              <tr key={index}>\n                <td>{count++}</td>\n                <td>{item}</td>\n                <td>{data[item]}</td>\n                <td>\n                  <Button href={`./${item}`}>Открыть страницу</Button>\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      )}\n      </Content>\n      </Layout>\n    </>\n  );\n}\n\nexport default MainPage;\n","import React, { useState, useEffect } from \"react\";\nimport Loader from \"../../common/Loader/Loader\";\nimport \"antd/dist/antd.css\";\nimport { Button, Layout } from \"antd\";\nimport { ArrowLeftOutlined, ArrowRightOutlined } from \"@ant-design/icons\";\nconst { Header, Content, Footer } = Layout;\n\nfunction Films() {\n  const [films, setFilms] = useState([]);\n  let [isLoading, setLoading] = useState(true);\n  let [page, setPage] = useState(1);\n  const [maxpage, setMaxpage] = useState();\n\n  useEffect(() => {\n    const prevBtn = document.getElementById(\"prev\");\n    page === 1 ? (prevBtn.disabled = true) : (prevBtn.disabled = false);\n    const nextBtn = document.getElementById(\"next\");\n    page === maxpage ? (nextBtn.disabled = true) : (nextBtn.disabled = false);\n    async function request() {\n      const url = `https://swapi.dev/api/films/?page=${page}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      console.log(data)\n      if (response.ok) {\n        setLoading((currentIsLoaded) => false);\n        setFilms(data.results);\n        setMaxpage(Math.ceil(data.count / 10));\n      }\n    }\n    request();\n    setLoading((currentIsLoaded) => (currentIsLoaded = false));\n  }, [page]);\n\n  function prevPage() {\n    if (page > 1) {\n      setPage(--page);\n    }\n  }\n\n  function nextPage() {\n    if (page < maxpage) {\n      setPage(++page);\n    } else if (page === maxpage) {\n    }\n  }\n\n  return (\n    <>\n      <Layout>\n        <Header>\n          <Button href=\"./\">Назад</Button>\n        </Header>\n        <Content>\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <table>\n              <thead className=\"table_head\">\n                <tr>\n                  <th>Название</th>\n                  <th>Режиссер</th>\n                  <th>Продюсер</th>\n                  <th>Дата выхода</th>\n                </tr>\n              </thead>\n              <tbody>\n                {films.map((item, index) => (\n                  <tr key={index}>\n                    <td>{item.title}</td>\n                    <td>{item.director}</td>\n                    <td>{item.producer}</td>\n                    <td>{item.release_date}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </Content>\n        <Footer>\n          <Button onClick={() => prevPage()} id=\"prev\">\n            <ArrowLeftOutlined />\n          </Button>\n          <Button onClick={() => nextPage()} id=\"next\">\n            <ArrowRightOutlined />\n          </Button>\n        </Footer>\n      </Layout>\n    </>\n  );\n}\n\nexport default Films;\n","export default __webpack_public_path__ + \"static/media/male.751b7f8a.svg\";","export default __webpack_public_path__ + \"static/media/female.af586cbc.svg\";","import React, { useState, useEffect } from \"react\";\nimport Moment from \"react-moment\";\nimport Loader from \"../../common/Loader/Loader\";\nimport male from \"../../assets/img/male.svg\";\nimport female from \"../../assets/img/female.svg\";\nimport \"antd/dist/antd.css\";\nimport \"./people.scss\";\n\nimport { Button, Layout } from \"antd\";\nimport { ArrowLeftOutlined, ArrowRightOutlined } from \"@ant-design/icons\";\nconst { Header, Content,Footer } = Layout;\n\nfunction People() {\n  const [people, setPeople] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n  let [page, setPage] = useState(1);\n  const [maxpage, setMaxpage] = useState();\n\n  useEffect(() => {\n    const prevBtn = document.getElementById(\"prev\");\n    page === 1 ? (prevBtn.disabled = true) : (prevBtn.disabled = false);\n    const nextBtn = document.getElementById(\"next\");\n    page === maxpage ? (nextBtn.disabled = true) : (nextBtn.disabled = false);\n    \n    async function request() {\n      const url = `https://swapi.dev/api/people/?page=${page}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      if (response.ok) {\n        setLoading((currentIsLoaded) => false);\n        setPeople(data.results);\n        setMaxpage(Math.ceil(data.count / 10));\n      }\n      console.log(people);\n    }\n\n    request();\n    \n  }, [page]);\n  function prevPage() {\n    if (page > 1) {\n      setPage(--page);\n    }\n  }\n\n  function nextPage() {\n    if (page < maxpage) {\n      setPage(++page);\n    } else if (page === maxpage) {\n    }\n  }\n  return (\n    <>\n      <Layout>\n        <Header>\n          <Button href=\"./\">Назад</Button>\n        </Header>\n        <Content>\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <table>\n              <thead className=\"table_head\">\n                <tr>\n                  <th>Имя</th>\n                  <th>Цвет кожи</th>\n                  <th>Пол</th>\n                  <th>Вес</th>\n                  <th>Цвет глаз</th>\n                  <th>Создано</th>\n                  <th>Отредактировано</th>\n                </tr>\n              </thead>\n              <tbody>\n                {people.map((item, index) => (\n                  <tr key={index}>\n                    <td>{item.name}</td>\n                    <td>{item.skin_color}</td>\n                    <td>\n                      {(() => {\n                        switch (item.gender) {\n                          case \"male\":\n                            return (\n                              <img\n                                src={male}\n                                className=\"gender\"\n                                alt=\"male\"\n                              ></img>\n                            );\n                          case \"female\":\n                            return (\n                              <img\n                                src={female}\n                                className=\"gender\"\n                                alt=\"female\"\n                              ></img>\n                            );\n                          default:\n                            return \"n/a\";\n                        }\n                      })()}\n                    </td>\n                    <td>{item.mass}</td>\n                    <td>{item.eye_color}</td>\n                    <td>\n                      <Moment format=\"YYYY/MM/DD\">{item.created}</Moment>\n                    </td>\n                    <td>\n                      <Moment format=\"YYYY/MM/DD\">{item.edited}</Moment>\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </Content>\n        <Footer>\n          <Button onClick={() => prevPage()} id=\"prev\">\n            <ArrowLeftOutlined />\n          </Button>\n          <Button onClick={() => nextPage()} id=\"next\">\n            <ArrowRightOutlined />\n          </Button>\n        </Footer>\n      </Layout>\n    </>\n  );\n}\n\nexport default People;\n","import React, { useState, useEffect, useReducer } from \"react\";\nimport Loader from \"../../common/Loader/Loader\";\nimport \"antd/dist/antd.css\";\nimport { Button, Layout } from \"antd\";\nimport {\n  ArrowLeftOutlined,\n  ArrowRightOutlined,\n  CaretDownOutlined,\n} from \"@ant-design/icons\";\nconst { Header, Content, Footer } = Layout;\n\nfunction Planets() {\n  const [planets, setPlanets] = useState([]);\n  const [ignored, forceUpdate] = useReducer((x) => x + 1, 0);\n  const [isLoading, setLoading] = useState(true);\n  let [page, setPage] = useState(3);\n  const [maxpage, setMaxpage] = useState();\n  useEffect(() => {\n    const prevBtn = document.getElementById(\"prev\");\n    page === 1 ? (prevBtn.disabled = true) : (prevBtn.disabled = false);\n    const nextBtn = document.getElementById(\"next\");\n    page === maxpage ? (nextBtn.disabled = true) : (nextBtn.disabled = false);\n    async function request() {\n      const url = `https://swapi.dev/api/planets/?page=${page}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      console.log(data);\n      if (response.ok) {\n        setLoading((currentIsLoaded) => false);\n        setPlanets(data.results);\n        setMaxpage(Math.ceil(data.count / 10));\n      }\n    }\n\n    request();\n  }, [page]);\n\n  function byNumberField(field) {\n    setPlanets(\n      planets.sort((a, b) => {\n        if (+a[field] > +b[field]) {\n          return 1;\n        } \n        if (+a[field] < +b[field]) {\n          return -1;\n        } \n        return 0;\n        \n      })\n    );\n    forceUpdate();\n  }\n\n  function byAlphField(field) {\n    setPlanets(\n      planets.sort((a, b) => {\n        if (a[field] > b[field]) {\n          return 1;\n        } \n        if (a[field] < b[field]) {\n          return -1;\n        } \n        return 0;\n      })\n    );\n    forceUpdate();\n  }\n  function prevPage() {\n    if (page > 1) {\n      setPage(--page);\n    }\n  }\n\n  function nextPage() {\n    if (page < maxpage) {\n      setPage(++page);\n    } else if (page === maxpage) {\n    }\n  }\n  return (\n    <>\n      <Layout>\n        <Header>\n          <Button href=\"./\">Назад</Button>\n        </Header>\n        <Content>\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <table>\n              <thead>\n                <tr>\n                  <th\n                    onClick={() => {\n                      byAlphField(\"name\");\n                    }}\n                  >\n                    Имя\n                    <CaretDownOutlined />\n                  </th>\n                  <th\n                    onClick={() => {\n                      byAlphField(\"climate\");\n                    }}\n                  >\n                    Климат\n                    <CaretDownOutlined />\n                  </th>\n                  <th\n                    onClick={() => {\n                      byNumberField(\"gravity\");\n                    }}\n                  >\n                    Гравитация\n                    <CaretDownOutlined />\n                  </th>\n                  <th\n                    onClick={() => {\n                      byNumberField(\"rotation_period\");\n                    }}\n                  >\n                    Продолжительность дня\n                    <CaretDownOutlined />\n                  </th>\n                  <th\n                    onClick={() => {\n                      byNumberField(\"orbital_period\");\n                    }}\n                  >\n                    Продолжительность года\n                    <CaretDownOutlined />\n                  </th>\n                  <th\n                    onClick={() => {\n                      byNumberField(\"population\");\n                    }}\n                  >\n                    Население\n                    <CaretDownOutlined />\n                  </th>\n                  <th\n                    onClick={() => {\n                      byAlphField(\"terrain\");\n                    }}\n                  >\n                    Поверхность\n                    <CaretDownOutlined />\n                  </th>\n                </tr>\n              </thead>\n              <tbody>\n                {planets.map((item, index) => (\n                  <tr key={index}>\n                    <td>{item.name}</td>\n                    <td>{item.climate}</td>\n                    <td>{item.gravity}</td>\n                    <td>{item.rotation_period}</td>\n                    <td>{item.orbital_period}</td>\n                    <td>{item.population}</td>\n                    <td>{item.terrain}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </Content>\n        <Footer>\n          <Button onClick={() => prevPage()} id=\"prev\">\n            <ArrowLeftOutlined />\n          </Button>\n          <Button onClick={() => nextPage()} id=\"next\">\n            <ArrowRightOutlined />\n          </Button>\n        </Footer>\n      </Layout>\n    </>\n  );\n}\n\nexport default Planets;\n","import React, { useState, useEffect } from \"react\";\nimport Loader from \"../../common/Loader/Loader\";\nimport \"antd/dist/antd.css\";\nimport { Button, Layout } from \"antd\";\nimport { ArrowLeftOutlined, ArrowRightOutlined } from \"@ant-design/icons\";\nconst { Header, Content, Footer } = Layout;\n\nfunction Species() {\n  const [species, setSpecies] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n  let [page, setPage] = useState(1);\n  const [maxpage, setMaxpage] = useState();\n\n  useEffect(() => {\n    const prevBtn = document.getElementById(\"prev\");\n    page === 1 ? (prevBtn.disabled = true) : (prevBtn.disabled = false);\n    const nextBtn = document.getElementById(\"next\");\n    page === maxpage ? (nextBtn.disabled = true) : (nextBtn.disabled = false);\n    async function request() {\n      const url = `https://swapi.dev/api/species/?page=${page}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      console.log(data);\n      if (response.ok) {\n        setLoading((currentIsLoaded) => false);\n        setSpecies(data.results);\n        setMaxpage(Math.ceil(data.count / 10));\n      }\n    }\n    request();\n  }, [page]);\n\n  function prevPage() {\n    if (page > 1) {\n      setPage(--page);\n    }\n  }\n\n  function nextPage() {\n    if (page < maxpage) {\n      setPage(++page);\n    } else if (page === maxpage) {\n    }\n  }\n  return (\n    <>\n      <Layout>\n        <Header>\n          <Button href=\"./\">Назад</Button>\n        </Header>\n        <Content>\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <table>\n              <thead>\n                <tr>\n                  <th>Наименование</th>\n                  <th>Средний рост</th>\n                  <th>Средняя продолжительность жизни</th>\n                  <th>Язык</th>\n                  <th>Цвет волос</th>\n                  <th>Цвет глаз</th>\n                  <th>Цвет кожи</th>\n                </tr>\n              </thead>\n              <tbody>\n                {species.map((item, index) => (\n                  <tr key={index}>\n                    <td>{item.name}</td>\n                    <td>{item.average_height}</td>\n                    <td>{item.average_lifespan}</td>\n                    <td>{item.language}</td>\n                    <td>{item.hair_colors}</td>\n                    <td>{item.eye_colors}</td>\n                    <td>{item.skin_colors}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          )}\n        </Content>\n        <Footer>\n          <Button onClick={() => prevPage()} id=\"prev\">\n            <ArrowLeftOutlined />\n          </Button>\n          <Button onClick={() => nextPage()} id=\"next\">\n            <ArrowRightOutlined />\n          </Button>\n        </Footer>\n      </Layout>\n    </>\n  );\n}\n\nexport default Species;\n","import React, { useState, useEffect } from \"react\";\nimport Loader from \"../../common/Loader/Loader\";\nimport \"antd/dist/antd.css\";\nimport { Button, Layout } from \"antd\";\nimport { ArrowLeftOutlined, ArrowRightOutlined } from \"@ant-design/icons\";\nconst { Header, Content, Footer } = Layout;\n\nfunction Starships() {\n  const [starships, setStarships] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n  let [page, setPage] = useState(1);\n  const [maxpage, setMaxpage] = useState();\n  useEffect(() => {\n    const prevBtn = document.getElementById(\"prev\");\n    page === 1 ? (prevBtn.disabled = true) : (prevBtn.disabled = false);\n    const nextBtn = document.getElementById(\"next\");\n    page === maxpage ? (nextBtn.disabled = true) : (nextBtn.disabled = false);    \n    async function request() {      \n      const url = `https://swapi.dev/api/starships/?page=${page}`;\n      const response = await fetch(url);\n      const data = await response.json();\n      console.log(data);\n      if (response.ok) {\n        setLoading((currentIsLoaded) => false);\n        setStarships(data.results);\n        setMaxpage(Math.ceil(data.count / 10));\n      }     \n    }    \n    request();    \n  }, [page]);\n\n  function prevPage() {\n    if (page > 1) {\n      setPage(--page);\n    }\n  }\n\n  function nextPage() {\n    if (page < maxpage) {\n      setPage(++page);\n    } else if (page === maxpage) {\n    }\n  }\n\n  return (\n    <>\n     <Layout>\n        <Header>\n          <Button href=\"./\">Назад</Button>\n        </Header>\n        <Content>\n      {isLoading?<Loader />:\n      (<table>\n        <thead>\n          <tr>\n            <th>Наименование</th>\n            <th>Модель</th>\n            <th>Класс</th>\n            <th>Грузоподьемность</th>\n            <th>Производитель</th>\n            <th>Экипаж</th>\n            <th>Пассажиров</th>\n          </tr>\n        </thead>\n        <tbody>\n          {starships.map((item, index) => (\n            <tr key={index}>\n              <td>{item.name}</td>\n              <td>{item.model}</td>\n              <td>{item.starship_class}</td>\n              <td>{item.cargo_capacity}</td>\n              <td>{item.manufacturer}</td>\n              <td>{item.crew}</td>\n              <td>{item.passengers}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>)}\n      </Content>\n      <Footer>\n          <Button onClick={() => prevPage()} id=\"prev\">\n            <ArrowLeftOutlined />\n          </Button>\n          <Button onClick={() => nextPage()} id=\"next\">\n            <ArrowRightOutlined />\n          </Button>\n        </Footer>\n        </Layout>\n    </>\n  );\n}\n\nexport default Starships;\n","import React, { useState, useEffect } from \"react\";\nimport Loader from \"../../common/Loader/Loader\";\nimport \"antd/dist/antd.css\";\nimport { Button, Layout } from \"antd\";\nimport { ArrowLeftOutlined, ArrowRightOutlined } from \"@ant-design/icons\";\nconst { Header, Content, Footer } = Layout;\n\nfunction Vehicles() {\n  const [vehicles, setVehicles] = useState([]);\n  const [isLoading, setLoading] = useState(true);\n  let [page, setPage] = useState(1);\n  const [maxpage, setMaxpage] = useState();\n  useEffect(() => {\n    const prevBtn = document.getElementById(\"prev\");\n    page === 1 ? (prevBtn.disabled = true) : (prevBtn.disabled = false);\n    const nextBtn = document.getElementById(\"next\");\n    page === maxpage ? (nextBtn.disabled = true) : (nextBtn.disabled = false);\n    async function request() {\n      const url = `https://swapi.dev/api/vehicles/?page=${page}`; \n      const response = await fetch(url);\n      const data = await response.json();\n      setVehicles((oldArray) => [...oldArray, ...data.results]);\n      console.log(data);\n      if (response.ok) {\n        setLoading((currentIsLoaded) => false);\n        setVehicles(data.results);\n        setMaxpage(Math.ceil(data.count / 10));\n      }\n    }     \n    request();    \n  }, [page]);\n\n  function prevPage() {\n    if (page > 1) {\n      setPage(--page);\n    }\n  }\n\n  function nextPage() {\n    if (page < maxpage) {\n      setPage(++page);\n    } else if (page === maxpage) {\n    }\n  }\n\n  return (\n    <>\n       <Layout>\n        <Header>\n          <Button href=\"./\">Назад</Button>\n        </Header>\n        <Content>\n      {isLoading?<Loader/>:  \n      (<table>\n        <thead>\n          <tr>\n            <th>Наименование</th>\n            <th>Модель</th>\n            <th>Класс</th>\n            <th>Грузоподьемность</th>\n            <th>Производитель</th>\n            <th>Экипаж</th>\n            <th>Пассажиров</th>\n          </tr>\n        </thead>\n        <tbody>\n          {vehicles.map((item, index) => (\n            <tr key={index}>\n              <td>{item.name}</td>\n              <td>{item.model}</td>\n              <td>{item.vehicle_class}</td>\n              <td>{item.cargo_capacity}</td>\n              <td>{item.manufacturer}</td>\n              <td>{item.crew}</td>\n              <td>{item.passengers}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>)}\n      </Content>\n      <Footer>\n          <Button onClick={() => prevPage()} id=\"prev\">\n            <ArrowLeftOutlined />\n          </Button>\n          <Button onClick={() => nextPage()} id=\"next\">\n            <ArrowRightOutlined />\n          </Button>\n        </Footer>\n        </Layout>\n    </>\n  );\n}\n\nexport default Vehicles;\n","import { Route, Switch, Redirect } from \"react-router-dom\";\nimport MainPage from \"./pages/MainPage/MainPage\";\nimport \"./App.scss\";\nimport Films from \"./pages/Films/Films\";\nimport People from \"./pages/People/People\";\nimport Planets from \"./pages/Planets/Planets\";\nimport Species from \"./pages/Species/Species\";\nimport Starships from \"./pages/Starships/Starships\";\nimport Vehicles from \"./pages/Vehicles/Vehicles\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Switch>\n        <Route path=\"/films\" component={Films} />\n        <Route path=\"/people\" component={People} />\n        <Route path=\"/planets\" component={Planets} />\n        <Route path=\"/species\" component={Species} />\n        <Route path=\"/starships\" component={Starships} />\n        <Route path=\"/vehicles\" component={Vehicles} />\n        <Route exact path=\"/\" component={MainPage} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport { BrowserRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <BrowserRouter basename=\"/star_wars\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}